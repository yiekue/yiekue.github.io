<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coderic</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coderic.top/"/>
  <updated>2019-06-16T13:57:08.242Z</updated>
  <id>http://coderic.top/</id>
  
  <author>
    <name>yiekue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>造轮子 | golang | http2简易客户端</title>
    <link href="http://coderic.top/2019/06/16/gh2c/"/>
    <id>http://coderic.top/2019/06/16/gh2c/</id>
    <published>2019-06-16T13:54:15.000Z</published>
    <updated>2019-06-16T13:57:08.242Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近需要进行http2相关的工作，但是开发环境和测试环境都的curl版本都太老了不支持http2，正好最近在学习golang，于是决定自己造个轮子：用go语言实现一个建议的http2客户端，以本文记录折腾过程。完整代码地址：<a href="https://github.com/yiekue/gh2c" target="_blank" rel="noopener">https://github.com/yiekue/gh2c</a>.</p></blockquote><p>涉及内容：</p><ul><li><code>flag</code>包的使用</li><li>标准库中<code>http.Client</code>的基本使用</li><li>golang中的<code>http2</code></li></ul><h2 id="标准库的flag包"><a href="#标准库的flag包" class="headerlink" title="标准库的flag包"></a>标准库的flag包</h2><p>平时写程序中免不了根据输入的命令行参数来控制程序的行为，golang的标准库中提供了一个<a href="https://golang.org/pkg/flag/" target="_blank" rel="noopener">flag包</a>，用于解析命令行输入的各种 <code>-</code> 开头的选项，使用比较方便，免去了自己挨个解析命令行参数的麻烦。</p><p>flag包支持<code>bool</code>、<code>string</code>、<code>int</code>等多种类型的选项，使用过程比较简单：</p><ol><li>用<code>flag.Bool()</code>、<code>flag.String()</code>等函数定义一个flag，这些函数都有三个入参，依次是flag的<strong>名称</strong>、<strong>默认值</strong>、<strong>帮助信息</strong>，函数的返回值是一个对应类型的 <strong>指针</strong> ！<strong>指针</strong> ！<strong>指针</strong> ！</li><li>在使用变量之前调用<code>flag.Parse()</code>进行解析。如果解析失败，程序会退出，并且打印各个变量的帮助信息，包含名称、默认值、和之前定义的帮助信息。<strong>解析会在第一个非 <code>-</code> 开头的参数停止，在非flag参数后面的flag会被忽略</strong>。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先定义需要flag的名称、默认值、帮助信息。需要注意的是这里的函数的返回值都是指针</span></span><br><span class="line"><span class="keyword">var</span> help = flag.Bool(<span class="string">"help"</span>, <span class="literal">false</span>, <span class="string">"print help info"</span>)</span><br><span class="line"><span class="keyword">var</span> version = flag.Int(<span class="string">"v"</span>, <span class="number">2</span>, <span class="string">"http version 1/2"</span>)</span><br><span class="line"><span class="keyword">var</span> method = flag.String(<span class="string">"method"</span>, <span class="string">"GET"</span>, <span class="string">"http method, GET/POST..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 首先调用Parse()函数进行解析。解析后，前面定义的各种变量就可以直接用了。</span></span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *help &#123;</span><br><span class="line"><span class="comment">// 打印选项的默认值和帮助信息</span></span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> *version &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">fmt.Println(<span class="string">"HTTP/1.1"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">fmt.Println(<span class="string">"HTTP/2.0"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"method:"</span>, *method)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[~/code/test]$ go run test.go      </span><br><span class="line">HTTP/2.0</span><br><span class="line">method: GET</span><br></pre></td></tr></table></figure><p>由于设置了输出帮助信息的flag默认是<code>false</code>，因此默认不会打印帮助信息，而是打印了另外两个flag的默认值。指定输出帮助信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[~/code/test]$ go run test.go -help</span><br><span class="line">  -help</span><br><span class="line">        print help info</span><br><span class="line">  -method string</span><br><span class="line">        http method, GET/POST... (default &quot;GET&quot;)</span><br><span class="line">  -v int</span><br><span class="line">        http version 1/2 (default 2)</span><br></pre></td></tr></table></figure><p>设置<code>bool</code>型的flag，只需要在命令行中添加这个flag即可，不需要指定它的值。而对于<code>string</code>之类的flag，就需要指定flag的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[~/code/test]$ go run test.go -v 1 -method &quot;POST&quot;</span><br><span class="line">HTTP/1.1</span><br><span class="line">method: POST</span><br></pre></td></tr></table></figure><p>如果命令行中的flag在代码中没有定义或者flag的输入格式错误，程序会打印错误信息和已定义的flag信息并退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[~/code/test]$ go run test.go -v 1 -metho  </span><br><span class="line">flag provided but not defined: -metho</span><br><span class="line">Usage of /tmp/go-build852894954/b001/exe/test:</span><br><span class="line">  -help</span><br><span class="line">        print help info</span><br><span class="line">  -method string</span><br><span class="line">        http method, GET/POST... (default &quot;GET&quot;)</span><br><span class="line">  -v int</span><br><span class="line">        http version 1/2 (default 2)</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><h2 id="http-Client-amp-amp-http2"><a href="#http-Client-amp-amp-http2" class="headerlink" title="http.Client &amp;&amp; http2"></a>http.Client &amp;&amp; http2</h2><p>golang的标准库<code>net/http</code>中提供了一个http的客户端，可以进行简单的http操作。但是如果要使用http2就需要额外的<code>golang.org/x/net/http2</code>，由于国内特殊的网络环境，golang.org无法直接访问到，可以到github的<a href="https://github.com/golang/net" target="_blank" rel="noopener">镜像仓库</a>中下载使用。同时需要下载http2依赖的<a href="https://github.com/golang/text" target="_blank" rel="noopener">text</a>.</p><p>使用Client的步骤一般如下：</p><ol><li>新建一个<code>http.Client</code></li><li>设置<code>client</code>的各项参数，例如tls参数，http版本等。</li><li>使用<code>http.NewRequest()</code>，新建一个请求，并设置请求的请求头等各项参数。</li><li>使用<code>client.Do(req)</code>，发送一个请求。</li><li>处理请求的响应信息。</li></ol><p>使用<code>http.Client</code>发起http请求的流程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/tls"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"golang.org/x/net/http2"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> help = flag.Bool(<span class="string">"help"</span>, <span class="literal">false</span>, <span class="string">"print help info"</span>)</span><br><span class="line"><span class="keyword">var</span> version = flag.Int(<span class="string">"v"</span>, <span class="number">2</span>, <span class="string">"http version 1/2"</span>)</span><br><span class="line"><span class="keyword">var</span> method = flag.String(<span class="string">"method"</span>, <span class="string">"GET"</span>, <span class="string">"http method, GET/POST..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *help &#123;</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行读取URL，URL需要在各种flag之后</span></span><br><span class="line">url := flag.Arg(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">""</span> == url &#123;</span><br><span class="line">fmt.Println(<span class="string">"error: please input URL"</span>)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tlsConfig := &amp;tls.Config&#123;</span><br><span class="line">InsecureSkipVerify: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个client</span></span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置http版本，默认使用http2</span></span><br><span class="line"><span class="keyword">switch</span> *version &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">client.Transport = &amp;http.Transport&#123;</span><br><span class="line">TLSClientConfig: tlsConfig,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">client.Transport = &amp;http2.Transport&#123;</span><br><span class="line">TLSClientConfig: tlsConfig,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"error: unkown http version:"</span>, *version)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用参数输入的请求方法和url新建一个请求</span></span><br><span class="line">req, err := http.NewRequest(*method, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"error: failed to create request,"</span>, err)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置User-Agent</span></span><br><span class="line">req.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"GH2C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</span><br><span class="line">fmt.Println(<span class="string">"error: failed to do request,"</span>, err)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取响应体信息</span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> <span class="literal">nil</span> != err &#123;</span><br><span class="line">fmt.Println(<span class="string">"error: failed to read body."</span>)</span><br><span class="line">flag.PrintDefaults()</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 答应响应头和响应体长度</span></span><br><span class="line">fmt.Println(<span class="string">"&gt;"</span>, resp.Proto, resp.Status)</span><br><span class="line"><span class="keyword">for</span> k, vs := <span class="keyword">range</span> resp.Header &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> vs &#123;</span><br><span class="line">fmt.Printf(<span class="string">"&gt; %s: %s\n"</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"body.length:"</span>, <span class="built_in">len</span>(<span class="keyword">string</span>(body)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在网上百度一个支持http2的网站，测试一把，效果如下<em>（域名侵删）</em>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[~/code/test]$ go run test.go -v 2 https://www.chinacache.com/</span><br><span class="line">&gt; HTTP/2.0 200 OK</span><br><span class="line">&gt; Content-Type: text/html</span><br><span class="line">&gt; Expires: Mon, 17 Jun 2019 04:39:54 GMT</span><br><span class="line">&gt; Accept-Ranges: bytes</span><br><span class="line">&gt; Age: 19405</span><br><span class="line">&gt; Etag: W/&quot;5cdbdbc8-2dc0&quot;</span><br><span class="line">&gt; Last-Modified: Wed, 15 May 2019 09:28:40 GMT</span><br><span class="line">&gt; Date: Sun, 16 Jun 2019 04:39:54 GMT</span><br><span class="line">&gt; Server: nginx</span><br><span class="line">&gt; Powered-By-Chinacache: HIT from CMN-CD-b-3g3</span><br><span class="line">&gt; Cc_cache: TCP_HIT</span><br><span class="line">body.length: 11712</span><br></pre></td></tr></table></figure><h2 id="gh2c"><a href="#gh2c" class="headerlink" title="gh2c"></a><a href="https://github.com/yiekue/gh2c" target="_blank" rel="noopener">gh2c</a></h2><p>将在上一节的基础上增加更多的flag来增加更多的功能就成了支持http2的简易拨测工具<a href="https://github.com/yiekue/gh2c" target="_blank" rel="noopener">gh2c</a>：</p><ul><li>支持自定义头域</li><li>自定义是否忽略证书</li><li>更友好的输出信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">*[master][~/code/gh2c]$ ./gh2c -help            </span><br><span class="line">Usage: ./gh2c -[flags] url</span><br><span class="line">  -H string</span><br><span class="line">        custom headers</span><br><span class="line">  -HKVsep string</span><br><span class="line">        used for split a custom header key and value (default &quot;:&quot;)</span><br><span class="line">  -Hsep string</span><br><span class="line">        used for split custom headers (default &quot;;&quot;)</span><br><span class="line">  -body</span><br><span class="line">        output response body</span><br><span class="line">  -debug</span><br><span class="line">        print debug info</span><br><span class="line">  -help</span><br><span class="line">        print help info</span><br><span class="line">  -host string</span><br><span class="line">        custom Host to override default (default &quot;defaltHost&quot;)</span><br><span class="line">  -method string</span><br><span class="line">        http method, GET/POST... (default &quot;GET&quot;)</span><br><span class="line">  -v int</span><br><span class="line">        http version 1/2 (default 2)</span><br><span class="line">  -verifyCert</span><br><span class="line">        enable verification of the server certificate</span><br></pre></td></tr></table></figure><p>效果如下，默认不输出body：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">*[master][~/code/gh2c]$ go run gh2c.go -v 2 -H &quot;test:testheadker|test2:testheader2&quot; -Hsep &quot;|&quot; https://example.com/</span><br><span class="line">&lt; GET HTTP/2.0 /</span><br><span class="line">&lt; Host: www.chinacache.com</span><br><span class="line">&lt; Test: testheadker</span><br><span class="line">&lt; Test2: testheader2</span><br><span class="line">&lt; User-Agent: GH2C</span><br><span class="line">&lt;</span><br><span class="line">&gt; HTTP/2.0 200 OK</span><br><span class="line">&gt; Etag: W/&quot;5cdbdbc8-2dc0&quot;</span><br><span class="line">&gt; Last-Modified: Wed, 15 May 2019 09:28:40 GMT</span><br><span class="line">&gt; Date: Sun, 16 Jun 2019 04:39:54 GMT</span><br><span class="line">&gt; Server: nginx</span><br><span class="line">&gt; Cc_cache: TCP_HIT</span><br><span class="line">&gt; Accept-Ranges: bytes</span><br><span class="line">&gt; Age: 11967</span><br><span class="line">&gt; Expires: Mon, 17 Jun 2019 04:39:54 GMT</span><br><span class="line">&gt; Powered-By-Chinacache: HIT from CMN-CD-b-3g3</span><br><span class="line">&gt; Content-Type: text/html</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><h1 id="FIXME"><a href="#FIXME" class="headerlink" title="FIXME"></a>FIXME</h1><p>在把<code>http2.Transport</code>赋值给<code>client.Transport</code>之后，使用<code>req.Proto</code>获取到的仍然是<code>HTTP/1.1</code>，不知道怎么获取实际使用http版本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近需要进行http2相关的工作，但是开发环境和测试环境都的curl版本都太老了不支持http2，正好最近在学习golang，于是决定自己造个轮子：用go语言实现一个建议的http2客户端，以本文记录折腾过程。完整代码地址：&lt;a href=&quot;htt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bundle Adjustment</title>
    <link href="http://coderic.top/2019/06/16/Bundle%20Adjustment/"/>
    <id>http://coderic.top/2019/06/16/Bundle Adjustment/</id>
    <published>2019-06-16T13:46:08.899Z</published>
    <updated>2019-06-16T13:46:08.899Z</updated>
    
    <content type="html"><![CDATA[<p>为了描述简便，用函数 $f(x)$ 来表示我们的目标函数，其中 $x$ 是包含了我们所有参数的向量，现在我们的目标就成了求解 $f(x)$ 在何处取得极小值。这个函数的参数这么多，很明显不能直接一步到位，但是从某个值出发（对于三维重建的问题，这个出发点已经有了，就是前面计算出来的相机姿态和三维点坐标）慢慢向正确的值靠近，一次靠近一丢丢（$\delta x$），很多次后就可以很接近或者达到正确的值了。于是嘛，问题又变了，变成了我们一次靠近多少的问题了。。。问题变到这儿，貌似就有现成的方法可以解决啦。</p><h3 id="梯度下降（最速下降）法"><a href="#梯度下降（最速下降）法" class="headerlink" title="梯度下降（最速下降）法"></a>梯度下降（最速下降）法</h3><p>从名字就可以看出来，这个方法是用了梯度信息。梯度的方向是函数上升最快的方向，我们要求的是最小值，那就沿着梯度方向的反方向进行靠近就可以了嘛。于是梯度下降法就是每次沿着梯度反方向以一个给定的步长进行逼近，这样就可以一步一步的靠近最小值。</p><p>这个方法虽然可以保证每一次都是在下降，但是下降的速度却并不像它的名字那样很快，收敛的速度较慢。</p><h3 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h3><p><a href="http://www.matongxue.com/madocs/205.html#/madoc" target="_blank" rel="noopener">这篇文章</a> 很好的解释了牛顿法的原理，但是貌似只能求零点啊，这个求极值有啥关系，函数导数为0的地方不就是极值么。。假设在第$k$ 次迭代的时候，我们的参数向量为$x_k$ ，本次迭代的增量为 $\delta x_k$ (也就是本次迭代要求解的东西)，那么函数就变成了$f(x_k+\delta x_k)$ ，首先将这个函数进行泰勒展开到二次项：<br>$$<br>f(x_k+\delta x_k) \approx f(x_k) + \delta x_k f’(x_k) +\frac{1}{2} (\delta x_k)^2 f’’(x_k) = \phi(\delta x_k)<br>$$<br>然后对$\phi(\delta x_k)$ 求导：<br>$$<br>\phi ‘(\delta x_k) = f’(x_k) + f’’(x_k)\delta x_k<br>$$<br>令上面的导数为0就可以求得$\delta x_k$ ，但是需要注意的是，$x_k、\delta x_k$ 都是向量，所以$f’(x_k)、f’’(x_k)$ 都是矩阵，它们分别叫做雅可比（Jacobi）矩阵(记为$J$)和海森(Hessian)矩阵(记为$H$)，雅克比矩阵是函数对所有参数求一阶偏导得到，海森矩阵是函数对所有参数求二阶偏导得到。于是：<br>$$<br>J+H\delta x_k = 0 \<br>\delta x_k = -H^{-1}J<br>$$<br>这种方法下降速度比梯度下降要快很多（至于为啥快，我就不知道了，，），但是他不能保证每次迭代都是在下降的（但是总体是在下降的）。这样貌似问题解决了，但是，回头去看看我们的函数，要对这个函数求二阶偏导，简直太复杂了，大家选择放弃，，，，</p><h3 id="高斯牛顿法"><a href="#高斯牛顿法" class="headerlink" title="高斯牛顿法"></a>高斯牛顿法</h3><p>牛顿大神把问题解决了一半，高斯大神决定再帮他一把，解决海森矩阵的问题，至于解决方式嘛，，，，就是不求它。我们在泰勒展开的时候就只展开到一次项：<br>$$<br>f(x_k+\delta x_k) \approx f(x_k)+ J\delta x_k<br>$$<br>这样貌似等式右边就变成了类型$ax+b$ 这种线性的形式了啊，这懒偷得有点多了，必须找其他的约束补回来，，，比如我们的优化的是重投影误差，我们最希望它为零啊，，，于是嘛就直接令上式为零就得到了：<br>$$<br>f(x_k) + J\delta x_k = 0<br>$$<br>貌似$\delta x_k​$ 就可以求出来了：$\delta x_k = -J^{-1}f(x_k)​$ ，但是总感觉有啥不对，，，恩，$J​$ 的大小是$m\times n​$ 的，它可能不是一个方阵！！！所以它是不能直接求逆的，所以需要按照这样算：<br>$$<br>f(x_k) + J\delta x_k = 0 \<br>J^Tf(x_k) + J^TJ\delta x_k = 0 \<br>\delta x_k = -(J^TJ)^{-1}J^Tf(x_k)<br>$$</p><p>这里可以看出来高斯牛顿法是利用了我们目标函数的特性来使用雅克比矩阵近似海森矩阵。这里只是解决了不计算海森矩阵，但是它还是存在不能保证每次迭代都是在下降的问题。</p><h3 id="Levenberg-Marquard算法"><a href="#Levenberg-Marquard算法" class="headerlink" title="Levenberg-Marquard算法"></a>Levenberg-Marquard算法</h3><p>梯度下降可以保证每次迭代都是下降的，但是收敛慢，高斯牛顿收敛快但是不能保证每次迭代都是下降的。于是LM算法就出现啦，它把梯度下降和高斯牛顿法结合了起来，使得每次迭代都是下降的，而且收敛速度还比较快。至于怎么结合的，简直不能更粗暴，用一个参数$\lambda$ 来控制增量计算方式是靠近高斯牛顿迭代的方法还是靠近梯度下降的方法，它把上面计算增量的方程改成了下面的形式：<br>$$<br>\delta x_k = -[J^TJ+\lambda diag(J^TJ)]^{-1} J^Tf(x_k)<br>$$<br>可以看出来$\lambda$ 很小甚至为零时，增量计算方式和高斯牛顿迭代的方法是一致的；当$\lambda$ 很大的时候，大到$J^TJ$ 可以忽略的时候，就变成了：<br>$$<br>\delta x_k = -\lambda J^Tf(x_k)<br>$$<br>恩，长得和梯度下降的式子挺像的。目前的Bundle Adjustment貌似都是基于LM算法实现的。</p><h3 id="雅克比矩阵"><a href="#雅克比矩阵" class="headerlink" title="雅克比矩阵"></a>雅克比矩阵</h3><p>上面提到了很多次雅克比矩阵，甚至于每次迭代都需要计算一次雅克比矩阵，雅克比又是个啥？对于我们三维重建的问题，我们期望优化的参数有相机姿态$[R\ \ \ t]$ ，这里一共有6个未知数（为啥是6个？因为旋转矩阵 $R$ 的自由度为3，事实上也可以用罗德里格斯公式转化为一个三维的向量$(r_1,r_2,r_3)$，位移向量$t$ 是长度为3的向量$(t_1,t_2,t_3)$），三维点的坐标$(x,y,z)$ 也就是一共就，9个参数。那么雅克比矩阵就一共有9列，每一列就是函数$f(x)$ 对不同的参数进行求偏导，这一列的元素值就是这个偏导数在一组参数下的取值：<br>$$<br>J = [\frac{\partial f}{\partial r_1} \ \ \frac{\partial f}{\partial r_2} \ \ \frac{\partial f}{\partial r_3} \ \ \frac{\partial f}{\partial t_1} \ \ \frac{\partial f}{\partial t_2} \ \ \frac{\partial f}{\partial t_3} \ \ \frac{\partial f}{\partial x} \ \ \frac{\partial f}{\partial y} \ \ \frac{\partial f}{\partial z}]<br>$$<br>假设一共有m个三维点，n幅图像，那么雅克比矩阵就应该有$i\times j$行，总的雅克比矩阵可以：<br>$$<br>J = \left[\begin{matrix}<br>\frac{\partial f}{\partial r_1^1} &amp;\frac{\partial f}{\partial r_2^1}&amp;\frac{\partial f}{\partial r_3^1} &amp;\frac{\partial f}{\partial t_1^1} &amp;\frac{\partial f}{\partial t_2^1} &amp;\frac{\partial f}{\partial t_3^1} &amp;\frac{\partial f}{\partial x^1} &amp;\frac{\partial f}{\partial y^1} &amp;\frac{\partial f}{\partial z^1} \<br>\frac{\partial f}{\partial r_1^2} &amp;\frac{\partial f}{\partial r_2^2}&amp;\frac{\partial f}{\partial r_3^2} &amp;\frac{\partial f}{\partial t_1^2} &amp;\frac{\partial f}{\partial t_2^2} &amp;\frac{\partial f}{\partial t_3^2} &amp;\frac{\partial f}{\partial x^1} &amp;\frac{\partial f}{\partial y^1} &amp;\frac{\partial f}{\partial z^1}  \<br>\vdots &amp; \vdots &amp;  \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \<br>\frac{\partial f}{\partial r_1^n} &amp;\frac{\partial f}{\partial r_2^n}&amp;\frac{\partial f}{\partial r_3^n} &amp;\frac{\partial f}{\partial t_1^n} &amp;\frac{\partial f}{\partial t_2^n} &amp;\frac{\partial f}{\partial t_3^n} &amp;\frac{\partial f}{\partial x^1} &amp;\frac{\partial f}{\partial y^1} &amp;\frac{\partial f}{\partial z^1}  \<br>\frac{\partial f}{\partial r_1^1} &amp;\frac{\partial f}{\partial r_2^1}&amp;\frac{\partial f}{\partial r_3^1} &amp;\frac{\partial f}{\partial t_1^1} &amp;\frac{\partial f}{\partial t_2^1} &amp;\frac{\partial f}{\partial t_3^1} &amp;\frac{\partial f}{\partial x^2} &amp;\frac{\partial f}{\partial y^2} &amp;\frac{\partial f}{\partial z^2}  \<br>\frac{\partial f}{\partial r_1^2} &amp;\frac{\partial f}{\partial r_2^2}&amp;\frac{\partial f}{\partial r_3^2} &amp;\frac{\partial f}{\partial t_1^2} &amp;\frac{\partial f}{\partial t_2^2} &amp;\frac{\partial f}{\partial t_3^2} &amp;\frac{\partial f}{\partial x^2} &amp;\frac{\partial f}{\partial y^2} &amp;\frac{\partial f}{\partial z^2}  \<br>\vdots &amp; \vdots &amp;  \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \<br>\frac{\partial f}{\partial r_1^n} &amp;\frac{\partial f}{\partial r_2^n}&amp;\frac{\partial f}{\partial r_3^n} &amp;\frac{\partial f}{\partial t_1^n} &amp;\frac{\partial f}{\partial t_2^n} &amp;\frac{\partial f}{\partial t_3^n} &amp;\frac{\partial f}{\partial x^2} &amp;\frac{\partial f}{\partial y^2} &amp;\frac{\partial f}{\partial z^2}  \<br>\vdots &amp; \vdots &amp;  \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \<br>\frac{\partial f}{\partial r_1^n} &amp;\frac{\partial f}{\partial r_2^n}&amp;\frac{\partial f}{\partial r_3^n} &amp;\frac{\partial f}{\partial t_1^n} &amp;\frac{\partial f}{\partial t_2^n} &amp;\frac{\partial f}{\partial t_3^n} &amp;\frac{\partial f}{\partial x^m} &amp;\frac{\partial f}{\partial y^m} &amp;\frac{\partial f}{\partial z^m}  \<br>\end{matrix}\right]<br>$$<br>三维重建一般都有成千上万个三维点和几十上百幅图像，所以雅克比矩阵非常庞大，每次迭代都需要计算一个如此大的矩阵，计算量也是非常巨大的，好在$J$ 是一个稀疏矩阵，也就是说有很多很多项都是0，比如当一个三维点在某一幅图像上没有投影点的时候，对应的那一行就为全为0了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了描述简便，用函数 $f(x)$ 来表示我们的目标函数，其中 $x$ 是包含了我们所有参数的向量，现在我们的目标就成了求解 $f(x)$ 在何处取得极小值。这个函数的参数这么多，很明显不能直接一步到位，但是从某个值出发（对于三维重建的问题，这个出发点已经有了，就是前面计算
      
    
    </summary>
    
    
  </entry>
  
</feed>
